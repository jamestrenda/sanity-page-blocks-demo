// import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { preconnect, prefetchDNS } from "react-dom";
import { SanityLive } from "../lib/sanity/live";
import { revalidatePath, revalidateTag } from "next/cache";
import { VisualEditing } from "next-sanity";
import { draftMode } from "next/headers";
import { PreviewBar } from "./components/preview-bar";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  preconnect("https://cdn.sanity.io");
  prefetchDNS("https://cdn.sanity.io");

  const navigation = [
    {
      text: "Article Feed",
      url: "#",
    },
    {
      text: "Article List",
      url: "#",
    },
    {
      text: "CTA",
      url: "#",
    },
    {
      text: "Description List",
      url: "#",
    },
    {
      text: "FAQ",
      url: "#",
    },
    {
      text: "Hero",
      url: "#",
    },
    {
      text: "Image/Text",
      url: "#",
    },
    {
      text: "Logo Cloud",
      url: "#",
    },
    {
      text: "Media Block",
      url: "#",
    },
    {
      text: "Text Block",
      url: "#",
    },
  ];

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <div className="grid grid-rows-[auto_1fr_auto] min-h-screen p-8 gap-4 font-[family-name:var(--font-geist-sans)]">
          <header className="py-8 flex items-center justify-center">
            <nav>
              <ul className="flex flex-wrap justify-center gap-3">
                {navigation.map((item, index) => (
                  <li key={index}>
                    <a
                      href={item.url}
                      className="block text-sm font-semibold text-foreground py-3 px-6 rounded-md bg-zinc-100 dark:bg-zinc-900"
                    >
                      {item.text}
                    </a>
                  </li>
                ))}
              </ul>
            </nav>
          </header>
          {/* <Suspense fallback={<NavbarSkeleton />}>
          <NavbarServer />
        </Suspense> */}
          <main className="flex flex-col gap-8 row-start-2">
            {(await draftMode()).isEnabled ? (
              <>
                {children}
                <VisualEditing
                  refresh={async (payload) => {
                    "use server";
                    if (payload.source === "manual") {
                      revalidatePath("/", "layout");
                      return;
                    }
                    const id = payload?.document?._id?.startsWith("drafts.")
                      ? payload?.document?._id.slice(7)
                      : payload?.document?._id;
                    const slug = payload?.document?.slug?.current;
                    const type = payload?.document?._type;
                    for (const tag of [slug, id, type]) {
                      if (tag) revalidateTag(tag);
                    }
                  }}
                />
                <PreviewBar />
              </>
            ) : (
              children
            )}
            {/* <Suspense fallback={<FooterSkeleton />}>
          <FooterServer />
        </Suspense> */}
          </main>
          <footer className="row-start-3 flex gap-[24px] flex-wrap items-center justify-center py-8">
            <p className=" text-sm font-semibold">
              <a
                className="flex text-foreground  py-3 px-6 rounded-md bg-zinc-100 dark:bg-zinc-900"
                href="https://github.com/jamestrenda/sanity-page-blocks-demo"
              >
                View Repo
              </a>
            </p>
          </footer>
        </div>
        <SanityLive />
      </body>
    </html>
  );
}

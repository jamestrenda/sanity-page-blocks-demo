/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Action = {
  _type: 'action'
  text?: string
  to?: Array<
    | {
        link?: {
          document?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'page'
          }
        }
        anchor?: string
        params?: Array<{
          key?: string
          value?: string
          _key: string
        }>
        _type: 'internal'
        _key: string
      }
    | {
        link?: {
          url?: string
          newWindow?: boolean
        }
        _type: 'external'
        _key: string
      }
    | {
        url?: string
        _type: 'relative'
        _key: string
      }
    | {
        link?: {
          file?: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
            }
            _type: 'file'
          }
        }
        _type: 'media'
        _key: string
      }
  >
}

export type HomeSettings = {
  _id: string
  _type: 'homeSettings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  homepage?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'page'
  }
}

export type GeneralSettings = {
  _id: string
  _type: 'generalSettings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  repo?: string
  headerMenu?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'menu'
  }
  footerMenu?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'menu'
  }
}

export type Menu = {
  _id: string
  _type: 'menu'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  actions?: Array<
    {
      _key: string
    } & Action
  >
}

export type TextBlock = {
  _type: 'textBlock'
  text?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type HeroBlock = {
  _type: 'heroBlock'
  text?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'overline'
    listItem?: never
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
  customImage?: {
    image?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    altText?: string
  }
  actions?: Array<{
    action?: {
      text?: string
      to?: Array<
        | {
            link?: {
              document?: {
                _ref: string
                _type: 'reference'
                _weak?: boolean
                [internalGroqTypeReferenceTo]?: 'page'
              }
            }
            anchor?: string
            params?: Array<{
              key?: string
              value?: string
              _key: string
            }>
            _type: 'internal'
            _key: string
          }
        | {
            link?: {
              url?: string
              newWindow?: boolean
            }
            _type: 'external'
            _key: string
          }
        | {
            url?: string
            _type: 'relative'
            _key: string
          }
        | {
            link?: {
              file?: {
                asset?: {
                  _ref: string
                  _type: 'reference'
                  _weak?: boolean
                  [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
                }
                _type: 'file'
              }
            }
            _type: 'media'
            _key: string
          }
      >
      icon?: IconPicker
    }
    _type: 'action'
    _key: string
  }>
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  blocks?: Array<
    | ({
        _key: string
      } & HeroBlock)
    | ({
        _key: string
      } & TextBlock)
  >
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type IconPicker = {
  _type: 'iconPicker'
  provider?: string
  name?: string
  svg?: string
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | Geopoint
  | Action
  | HomeSettings
  | GeneralSettings
  | Menu
  | TextBlock
  | HeroBlock
  | Page
  | SanityFileAsset
  | Slug
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | IconPicker
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ../../packages/sanity/queries.ts
// Variable: INDEX_QUERY
// Query: *[_id == "homeSettings"][0].homepage-> {    _id,  _type,  title,  "slug": coalesce(slug.current, ""),  blocks[] {      _key,  _type,    _type == "heroBlock" => {    _type,    _type,    text,      "image": customImage.image {    ...,    "altText": coalesce(^.customImage.altText, asset->altText, asset->originalFilename, "Image-Broken"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },      actions[] {    _type,    _key,    "text": select(      defined(action.text) => {        "text": action.text,      },      action.to[0]._type == "internal" => {        action.to[0].link.document->_type == "page" => {          "text": action.to[0].link.document->title        }      },    ).text,    "url": select(      action.to[0]._type == "internal" => {        action.to[0].link.document->_type == "page" => {          "url":          coalesce(action.to[0].link.document->slug.current  +             select(defined(action.to[0].params) => "?" + array::join(action.to[0].params[]{"param": key + "=" + value}.param, "&")          )          + select(            defined(action.to[0].anchor) => '#' + action.to[0].anchor, ''          ), action.to[0].link.document->slug.current, '#')        }      }.url,      action.to[0]._type == "external" => {        "url": action.to[0].link.url,        newWindow      }.url,      action.to[0]._type == "relative" => {        "url": action.to[0].url,      }.url    ),    "newWindow": select(action.to[0]._type == "external" => {      "newWindow": action.to[0].link.newWindow    }).newWindow,    "icon": action.icon,  }  },    _type == "textBlock" => {    _type,    _type,    text,  }  }}
export type INDEX_QUERYResult = {
  _id: string
  _type: 'page'
  title: string | null
  slug: string | ''
  blocks: Array<
    | {
        _key: string
        _type: 'heroBlock'
        text: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'h1' | 'normal' | 'overline'
          listItem?: never
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }> | null
        image: {
          asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
          }
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: 'image'
          altText: string | 'Image-Broken'
          blurData: string | null
          dominantColor: string | null
        } | null
        actions: Array<{
          _type: 'action'
          _key: string
          text: null | string
          url: null | string | '#'
          newWindow: boolean | null
          icon: IconPicker | null
        }> | null
      }
    | {
        _key: string
        _type: 'textBlock'
        text: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }> | null
      }
  > | null
} | null
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug][0]{    _id,  _type,  title,  "slug": coalesce(slug.current, ""),  blocks[] {      _key,  _type,    _type == "heroBlock" => {    _type,    _type,    text,      "image": customImage.image {    ...,    "altText": coalesce(^.customImage.altText, asset->altText, asset->originalFilename, "Image-Broken"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },      actions[] {    _type,    _key,    "text": select(      defined(action.text) => {        "text": action.text,      },      action.to[0]._type == "internal" => {        action.to[0].link.document->_type == "page" => {          "text": action.to[0].link.document->title        }      },    ).text,    "url": select(      action.to[0]._type == "internal" => {        action.to[0].link.document->_type == "page" => {          "url":          coalesce(action.to[0].link.document->slug.current  +             select(defined(action.to[0].params) => "?" + array::join(action.to[0].params[]{"param": key + "=" + value}.param, "&")          )          + select(            defined(action.to[0].anchor) => '#' + action.to[0].anchor, ''          ), action.to[0].link.document->slug.current, '#')        }      }.url,      action.to[0]._type == "external" => {        "url": action.to[0].link.url,        newWindow      }.url,      action.to[0]._type == "relative" => {        "url": action.to[0].url,      }.url    ),    "newWindow": select(action.to[0]._type == "external" => {      "newWindow": action.to[0].link.newWindow    }).newWindow,    "icon": action.icon,  }  },    _type == "textBlock" => {    _type,    _type,    text,  }  }}
export type PAGE_QUERYResult = {
  _id: string
  _type: 'page'
  title: string | null
  slug: string | ''
  blocks: Array<
    | {
        _key: string
        _type: 'heroBlock'
        text: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'h1' | 'normal' | 'overline'
          listItem?: never
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }> | null
        image: {
          asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
          }
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: 'image'
          altText: string | 'Image-Broken'
          blurData: string | null
          dominantColor: string | null
        } | null
        actions: Array<{
          _type: 'action'
          _key: string
          text: null | string
          url: null | string | '#'
          newWindow: boolean | null
          icon: IconPicker | null
        }> | null
      }
    | {
        _key: string
        _type: 'textBlock'
        text: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }> | null
      }
  > | null
} | null
// Variable: PAGE_PATHS_QUERY
// Query: *[_type == "page" && defined(slug.current)].slug.current
export type PAGE_PATHS_QUERYResult = Array<string | null>
// Variable: SETTINGS_QUERY
// Query: {  "general": *[_id == "generalSettings"][0] {    _id,    _type,    repo,    headerMenu-> {      _id,      _type,        actions[] {    _type,    _key,    "text": select(      defined(action.text) => {        "text": action.text,      },      action.to[0]._type == "internal" => {        action.to[0].link.document->_type == "page" => {          "text": action.to[0].link.document->title        }      },    ).text,    "url": select(      action.to[0]._type == "internal" => {        action.to[0].link.document->_type == "page" => {          "url":          coalesce(action.to[0].link.document->slug.current  +             select(defined(action.to[0].params) => "?" + array::join(action.to[0].params[]{"param": key + "=" + value}.param, "&")          )          + select(            defined(action.to[0].anchor) => '#' + action.to[0].anchor, ''          ), action.to[0].link.document->slug.current, '#')        }      }.url,      action.to[0]._type == "external" => {        "url": action.to[0].link.url,        newWindow      }.url,      action.to[0]._type == "relative" => {        "url": action.to[0].url,      }.url    ),    "newWindow": select(action.to[0]._type == "external" => {      "newWindow": action.to[0].link.newWindow    }).newWindow,    "icon": action.icon,  }    }  }}
export type SETTINGS_QUERYResult = {
  general:
    | {
        _id: string
        _type: 'generalSettings'
        repo: string | null
        headerMenu: {
          _id: string
          _type: 'menu'
          actions: Array<{
            _type: 'action'
            _key: string
            text: null
            url: null
            newWindow: null
            icon: null
          }> | null
        } | null
      }
    | {
        _id: string
        _type: 'homeSettings'
        repo: null
        headerMenu: null
      }
    | {
        _id: string
        _type: 'menu'
        repo: null
        headerMenu: null
      }
    | {
        _id: string
        _type: 'page'
        repo: null
        headerMenu: null
      }
    | {
        _id: string
        _type: 'sanity.fileAsset'
        repo: null
        headerMenu: null
      }
    | {
        _id: string
        _type: 'sanity.imageAsset'
        repo: null
        headerMenu: null
      }
    | null
}
// Variable: HEADER_MENU_QUERY
// Query: *[_id == "generalSettings" && defined(headerMenu)][0].headerMenu-> {    _id,    _type,    const,    actions[] {      _type,      _key,      "text": select(        defined(text) => {          "text": text,        },        to[0]._type == "internal" => {          to[0].link.document->_type == "page" => {            "text": to[0].link.document->title          }        },      ).text,      "url": select(        to[0]._type == "internal" => {          to[0].link.document->_type == "page" => {            "url":            coalesce(to[0].link.document->slug.current  +               select(defined(to[0].params) => "?" + array::join(to[0].params[]{"param": key + "=" + value}.param, "&")            )            + select(              defined(to[0].anchor) => '#' + to[0].anchor, ''            ), to[0].link.document->slug.current, '#')          }        }.url,        to[0]._type == "external" => {          "url": to[0].link.url,          newWindow        }.url,        to[0]._type == "relative" => {          "url": to[0].url,        }.url      ),      "newWindow": select(to[0]._type == "external" => {        "newWindow": to[0].link.newWindow      }).newWindow,    }  }
export type HEADER_MENU_QUERYResult = {
  _id: string
  _type: 'menu'
  const: null
  actions: Array<{
    _type: 'action'
    _key: string
    text: null | string
    url: null | string | '#'
    newWindow: boolean | null
  }> | null
} | null

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_id == "homeSettings"][0].homepage-> {\n  \n  _id,\n  _type,\n  title,\n  "slug": coalesce(slug.current, ""),\n  blocks[] {\n    \n  _key,\n  _type,\n  \n  _type == "heroBlock" => {\n    _type,\n    _type,\n    text,\n    \n  "image": customImage.image {\n    ...,\n    "altText": coalesce(^.customImage.altText, asset->altText, asset->originalFilename, "Image-Broken"),\n    "blurData": asset->metadata.lqip,\n    "dominantColor": asset->metadata.palette.dominant.background,\n  }\n,\n    \n  actions[] {\n    _type,\n    _key,\n    "text": select(\n      defined(action.text) => {\n        "text": action.text,\n      },\n      action.to[0]._type == "internal" => {\n        action.to[0].link.document->_type == "page" => {\n          "text": action.to[0].link.document->title\n        }\n      },\n    ).text,\n    "url": select(\n      action.to[0]._type == "internal" => {\n        action.to[0].link.document->_type == "page" => {\n          "url":\n          coalesce(action.to[0].link.document->slug.current  + \n            select(defined(action.to[0].params) => "?" + array::join(action.to[0].params[]{"param": key + "=" + value}.param, "&")\n          )\n          + select(\n            defined(action.to[0].anchor) => \'#\' + action.to[0].anchor, \'\'\n          ), action.to[0].link.document->slug.current, \'#\')\n        }\n      }.url,\n      action.to[0]._type == "external" => {\n        "url": action.to[0].link.url,\n        newWindow\n      }.url,\n      action.to[0]._type == "relative" => {\n        "url": action.to[0].url,\n      }.url\n    ),\n    "newWindow": select(action.to[0]._type == "external" => {\n      "newWindow": action.to[0].link.newWindow\n    }).newWindow,\n    "icon": action.icon,\n  }\n\n  }\n,\n  \n  _type == "textBlock" => {\n    _type,\n    _type,\n    text,\n  }\n\n\n  }\n\n}': INDEX_QUERYResult
    '*[_type == "page" && slug.current == $slug][0]{\n  \n  _id,\n  _type,\n  title,\n  "slug": coalesce(slug.current, ""),\n  blocks[] {\n    \n  _key,\n  _type,\n  \n  _type == "heroBlock" => {\n    _type,\n    _type,\n    text,\n    \n  "image": customImage.image {\n    ...,\n    "altText": coalesce(^.customImage.altText, asset->altText, asset->originalFilename, "Image-Broken"),\n    "blurData": asset->metadata.lqip,\n    "dominantColor": asset->metadata.palette.dominant.background,\n  }\n,\n    \n  actions[] {\n    _type,\n    _key,\n    "text": select(\n      defined(action.text) => {\n        "text": action.text,\n      },\n      action.to[0]._type == "internal" => {\n        action.to[0].link.document->_type == "page" => {\n          "text": action.to[0].link.document->title\n        }\n      },\n    ).text,\n    "url": select(\n      action.to[0]._type == "internal" => {\n        action.to[0].link.document->_type == "page" => {\n          "url":\n          coalesce(action.to[0].link.document->slug.current  + \n            select(defined(action.to[0].params) => "?" + array::join(action.to[0].params[]{"param": key + "=" + value}.param, "&")\n          )\n          + select(\n            defined(action.to[0].anchor) => \'#\' + action.to[0].anchor, \'\'\n          ), action.to[0].link.document->slug.current, \'#\')\n        }\n      }.url,\n      action.to[0]._type == "external" => {\n        "url": action.to[0].link.url,\n        newWindow\n      }.url,\n      action.to[0]._type == "relative" => {\n        "url": action.to[0].url,\n      }.url\n    ),\n    "newWindow": select(action.to[0]._type == "external" => {\n      "newWindow": action.to[0].link.newWindow\n    }).newWindow,\n    "icon": action.icon,\n  }\n\n  }\n,\n  \n  _type == "textBlock" => {\n    _type,\n    _type,\n    text,\n  }\n\n\n  }\n\n}': PAGE_QUERYResult
    '\n  *[_type == "page" && defined(slug.current)].slug.current\n': PAGE_PATHS_QUERYResult
    '{\n  "general": *[_id == "generalSettings"][0] {\n    _id,\n    _type,\n    repo,\n    headerMenu-> {\n      _id,\n      _type,\n      \n  actions[] {\n    _type,\n    _key,\n    "text": select(\n      defined(action.text) => {\n        "text": action.text,\n      },\n      action.to[0]._type == "internal" => {\n        action.to[0].link.document->_type == "page" => {\n          "text": action.to[0].link.document->title\n        }\n      },\n    ).text,\n    "url": select(\n      action.to[0]._type == "internal" => {\n        action.to[0].link.document->_type == "page" => {\n          "url":\n          coalesce(action.to[0].link.document->slug.current  + \n            select(defined(action.to[0].params) => "?" + array::join(action.to[0].params[]{"param": key + "=" + value}.param, "&")\n          )\n          + select(\n            defined(action.to[0].anchor) => \'#\' + action.to[0].anchor, \'\'\n          ), action.to[0].link.document->slug.current, \'#\')\n        }\n      }.url,\n      action.to[0]._type == "external" => {\n        "url": action.to[0].link.url,\n        newWindow\n      }.url,\n      action.to[0]._type == "relative" => {\n        "url": action.to[0].url,\n      }.url\n    ),\n    "newWindow": select(action.to[0]._type == "external" => {\n      "newWindow": action.to[0].link.newWindow\n    }).newWindow,\n    "icon": action.icon,\n  }\n\n    }\n  }\n}': SETTINGS_QUERYResult
    '*[_id == "generalSettings" && defined(headerMenu)][0].headerMenu-> {\n    _id,\n    _type,\n    const,\n    actions[] {\n      _type,\n      _key,\n      "text": select(\n        defined(text) => {\n          "text": text,\n        },\n        to[0]._type == "internal" => {\n          to[0].link.document->_type == "page" => {\n            "text": to[0].link.document->title\n          }\n        },\n      ).text,\n      "url": select(\n        to[0]._type == "internal" => {\n          to[0].link.document->_type == "page" => {\n            "url":\n            coalesce(to[0].link.document->slug.current  + \n              select(defined(to[0].params) => "?" + array::join(to[0].params[]{"param": key + "=" + value}.param, "&")\n            )\n            + select(\n              defined(to[0].anchor) => \'#\' + to[0].anchor, \'\'\n            ), to[0].link.document->slug.current, \'#\')\n          }\n        }.url,\n        to[0]._type == "external" => {\n          "url": to[0].link.url,\n          newWindow\n        }.url,\n        to[0]._type == "relative" => {\n          "url": to[0].url,\n        }.url\n      ),\n      "newWindow": select(to[0]._type == "external" => {\n        "newWindow": to[0].link.newWindow\n      }).newWindow,\n    }\n  }\n': HEADER_MENU_QUERYResult
  }
}

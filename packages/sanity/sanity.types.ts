/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type HomeSettings = {
  _id: string
  _type: 'homeSettings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  homepage?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'page'
  }
}

export type TextBlock = {
  _type: 'textBlock'
  text?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type HeroBlock = {
  _type: 'heroBlock'
  text?: string
  customImage?: {
    image?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    altText?: string
  }
  actions?: Array<{
    action?: {
      text?: string
      to?: Array<
        | {
            link?: {
              document?: {
                _ref: string
                _type: 'reference'
                _weak?: boolean
                [internalGroqTypeReferenceTo]?: 'page'
              }
            }
            anchor?: string
            params?: Array<{
              key?: string
              value?: string
              _key: string
            }>
            _type: 'internal'
            _key: string
          }
        | {
            link?: {
              url?: string
              newWindow?: boolean
            }
            _type: 'external'
            _key: string
          }
        | {
            url?: string
            _type: 'relative'
            _key: string
          }
        | {
            link?: {
              file?: {
                asset?: {
                  _ref: string
                  _type: 'reference'
                  _weak?: boolean
                  [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
                }
                _type: 'file'
              }
            }
            _type: 'media'
            _key: string
          }
      >
    }
    _type: 'action'
    _key: string
  }>
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  blocks?: Array<
    | ({
        _key: string
      } & HeroBlock)
    | ({
        _key: string
      } & TextBlock)
  >
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | Geopoint
  | HomeSettings
  | TextBlock
  | HeroBlock
  | Page
  | SanityFileAsset
  | Slug
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ../../packages/sanity/queries.ts
// Variable: INDEX_QUERY
// Query: *[_id == "homeSettings"][0].homepage-> {    _id,    _type,    "slug": coalesce(slug.current, ""),    blocks[] {        ...,  _type,    _type == "heroBlock" => {    ...,      "image": customImage.image {    ...,    "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },      actions[] {    _type,    _key,    ...action {      text,      "text": select(        defined(text) => { text },        to[0]._type == "internal" => {          to[0].link.document->_type == "page" => {            "text": to[0].link.document->title          }        },        {          text        }      ).text,      ...select(        to[0]._type == "internal" => {          to[0].link.document->_type == "page" => {            "url": coalesce(to[0].link.document->slug.current  +                 select(defined(to[0].params) => "?" + array::join(to[0].params[]{"param": key + "=" + value}.param, "&")              )              + select(                defined(to[0].anchor) => '#' + to[0].anchor, ''              ), to[0].link.document->slug.current, '#')          }        },        to[0]._type == "external" => {          "url": to[0].link.url,          newWindow        },        to[0]._type == "relative" => {          "url": to[0].url,        },        {          url        }      )    }  }  }    },  }
export type INDEX_QUERYResult = {
  _id: string
  _type: 'page'
  slug: string | ''
  blocks: Array<
    | {
        _key: string
        _type: 'heroBlock'
        text?: string
        customImage?: {
          image?: {
            asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
            }
            hotspot?: SanityImageHotspot
            crop?: SanityImageCrop
            _type: 'image'
          }
          altText?: string
        }
        actions: Array<
          | {
              _type: 'action'
              _key: string
              text: null | string
              url: null | string
              newWindow: null
            }
          | {
              _type: 'action'
              _key: string
              text: null | string
              url: null
            }
          | {
              _type: 'action'
              _key: string
              text: null | string
              url: null | string
            }
          | {
              _type: 'action'
              _key: string
              text: null | string
              url: string | '#'
            }
          | {
              _type: 'action'
              _key: string
              text: null | string
            }
          | {
              _type: 'action'
              _key: string
            }
        > | null
        image: {
          asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
          }
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: 'image'
          alt: string | 'Image-Broken'
          blurData: string | null
          dominantColor: string | null
        } | null
      }
    | {
        _key: string
        _type: 'textBlock'
        text?: Array<{
          children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
          }>
          style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
          listItem?: 'bullet' | 'number'
          markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
        }>
      }
  > | null
} | null

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_id == "homeSettings"][0].homepage-> {\n    _id,\n    _type,\n    "slug": coalesce(slug.current, ""),\n    blocks[] {\n      \n  ...,\n  _type,\n  \n  _type == "heroBlock" => {\n    ...,\n    \n  "image": customImage.image {\n    ...,\n    "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),\n    "blurData": asset->metadata.lqip,\n    "dominantColor": asset->metadata.palette.dominant.background,\n  }\n,\n    \n  actions[] {\n    _type,\n    _key,\n    ...action {\n      text,\n      "text": select(\n        defined(text) => { text },\n        to[0]._type == "internal" => {\n          to[0].link.document->_type == "page" => {\n            "text": to[0].link.document->title\n          }\n        },\n        {\n          text\n        }\n      ).text,\n      ...select(\n        to[0]._type == "internal" => {\n          to[0].link.document->_type == "page" => {\n            "url": coalesce(to[0].link.document->slug.current  + \n                select(defined(to[0].params) => "?" + array::join(to[0].params[]{"param": key + "=" + value}.param, "&")\n              )\n              + select(\n                defined(to[0].anchor) => \'#\' + to[0].anchor, \'\'\n              ), to[0].link.document->slug.current, \'#\')\n          }\n        },\n        to[0]._type == "external" => {\n          "url": to[0].link.url,\n          newWindow\n        },\n        to[0]._type == "relative" => {\n          "url": to[0].url,\n        },\n        {\n          url\n        }\n      )\n    }\n  }\n\n  }\n\n\n    },\n  }': INDEX_QUERYResult
  }
}
